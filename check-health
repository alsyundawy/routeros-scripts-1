#!rsc
# RouterOS script: check-health
# Copyright (c) 2019 Christian Hesse <mail@eworm.de>
#
# check for RouterOS health state

:global CheckHealthLast;
:global CheckHealthTemperature;
:global Identity;

:global SendNotification;

:local FormatVoltage do={
  :local Voltage [ :tonum $1 ];
  :return (($Voltage / 10) . "." . ($Voltage % ($Voltage / 10 * 10)) . "V");
}

:local CheckHealthCurrent [ / system health get ];

:foreach Voltage in={ "psu1-voltage"; "psu2-voltage"; "voltage" } do={
  :if ([ :typeof ($CheckHealthLast->$Voltage) ] = "num" && \
       [ :typeof ($CheckHealthCurrent->$Voltage) ] = "num") do={
    :if ($CheckHealthLast->$Voltage * 115 / 100 < $CheckHealthCurrent->$Voltage || \
         $CheckHealthLast->$Voltage * 100 / 115 > $CheckHealthCurrent->$Voltage) do={
      $SendNotification ("Health warning: " . $Voltage) \
          ("The " . $Voltage . " on " . $Identity . " jumped more than 15%.\n\n" . \
          "old value: " . [ $FormatVoltage ($CheckHealthLast->$Voltage) ] . "\n" . \
          "new value: " . [ $FormatVoltage ($CheckHealthCurrent->$Voltage) ]);
    }
  }
}

:foreach PSU in={ "psu1"; "psu2" } do={
  :if ([ :typeof ($CheckHealthLast->($PSU . "-state")) ] = "str" && \
       [ :typeof ($CheckHealthCurrent->($PSU . "-state")) ] = "str") do={
    :if ($CheckHealthLast->($PSU . "-state") = "ok" && \
         $CheckHealthCurrent->($PSU . "-state") != "ok") do={
      $SendNotification ("Health warning: " . $PSU . " state") \
          ("The power supply unit '" . $PSU . "' on " . $Identity . " failed!");
    }
    :if ($CheckHealthLast->($PSU . "-state") != "ok" && \
         $CheckHealthCurrent->($PSU . "-state") = "ok") do={
      $SendNotification ("Health recovery: " . $PSU . " state") \
          ("The power supply unit '" . $PSU . "' on " . $Identity . " recovered!");
    }
  }
}

:foreach Temperature in={ "temperature"; "cpu-temperature"; "board-temperature1"; "board-temperature2" } do={
  :if ([ :typeof ($CheckHealthLast->$Temperature) ] = "num" && \
       [ :typeof ($CheckHealthCurrent->$Temperature) ] = "num") do={
    :if ([ :typeof ($CheckHealthTemperature->$Temperature) ] != "num" ) do={
      :log warning ("No threshold given for " . $Temperature . ", assuming 50C.");
      :set ($CheckHealthTemperature->$Temperature) 50;
    }
    :if ($CheckHealthLast->$Temperature <= $CheckHealthTemperature->$Temperature && \
         $CheckHealthCurrent->$Temperature > $CheckHealthTemperature->$Temperature) do={
      $SendNotification ("Health warning: " . $Temperature) \
          ("The " . $Temperature . " on " . $Identity . " is above threshold: " .  \
          $CheckHealthCurrent->$Temperature . "C");
    }
    :if ($CheckHealthLast->$Temperature > $CheckHealthTemperature->$Temperature && \
         $CheckHealthCurrent->$Temperature <= $CheckHealthTemperature->$Temperature) do={
      $SendNotification ("Health recovery: " . $Temperature) \
          ("The " . $Temperature . " on " . $Identity . " dropped below threshold: " .  \
          $CheckHealthCurrent->$Temperature . "C");
    }
  }
}

:set CheckHealthLast $CheckHealthCurrent;
