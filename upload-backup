#!rsc
# RouterOS script: upload-backup
# Copyright (c) 2013-2020 Christian Hesse <mail@eworm.de>
#
# create and upload backup and config file

:global BackupPassword;
:global BackupSendBinary;
:global BackupSendExport;
:global BackupUploadPass;
:global BackupUploadUrl;
:global BackupUploadUser;
:global Domain;
:global Identity;

:global CharacterReplace;
:global DeviceInfo;
:global LogPrintExit;
:global SendNotification;

:if ($BackupSendBinary != true && \
     $BackupSendExport != true) do={
  $LogPrintExit error ("Configured to send neither backup nor config export.") true;
}

# filename based on identity
:local FileName [ $CharacterReplace ($Identity . "." . $Domain) "." "_" ];
:local BackupFile "none";
:local ConfigFile "none";

# binary backup
:if ($BackupSendBinary = true) do={
  / system backup save encryption=aes-sha256 name=$FileName password=$BackupPassword;

  :do {
    / tool fetch upload=yes url=($BackupUploadUrl . "/" . $FileName . ".backup") \
        user=$BackupUploadUser password=$BackupUploadPass src-path=($FileName . ".backup");
    :set BackupFile ($FileName . ".backup");
  } on-error={
    :log error ("Uploading backup file failed!");
    :set BackupFile "failed";
  }
}

# create configuration export
:if ($BackupSendExport = true) do={
  / export terse file=$FileName;

  :do {
    / tool fetch upload=yes url=($BackupUploadUrl . "/" . $FileName . ".rsc") \
        user=$BackupUploadUser password=$BackupUploadPass src-path=($FileName . ".rsc");
    :set ConfigFile ($FileName . ".rsc");
  } on-error={
    :log error ("Uploading configuration export failed!");
    :set ConfigFile "failed";
  }
}

$SendNotification "Backup & Config Upload" \
  ("Backup and config export upload for " . $Identity . ".\n\n" . \
    [ $DeviceInfo ] . "\n\n" . \
    "Backup file:    " . $BackupFile . "\n" . \
    "Config file:    " . $ConfigFile) "" "true";
}
